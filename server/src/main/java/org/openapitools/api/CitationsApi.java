/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.ProteinEntry;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-11T16:39:38.427356300-06:00[America/Chicago]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "citation", description = "the citation API")
public interface CitationsApi {

    default CitationsApiDelegate getDelegate() {
        return new CitationsApiDelegate() {};
    }

    /**
     * GET /citations/{issn} : Get all proteins cited by this article
     *
     * @param issn the issn of interest (required)
     * @param limit How many items to return at one time (max 100) (optional)
     * @return A paged array of proteins (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProteinsCited",
        summary = "Get all proteins cited by this article",
        tags = { "citation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of proteins", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProteinEntry.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/citations/{issn}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProteinEntry> getProteinsCited(
        @Parameter(name = "issn", description = "the issn of interest", required = true, in = ParameterIn.PATH) @PathVariable("issn") String issn,
        @Max(100) @Parameter(name = "limit", description = "How many items to return at one time (max 100)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        return getDelegate().getProteinsCited(issn, limit);
    }

}
